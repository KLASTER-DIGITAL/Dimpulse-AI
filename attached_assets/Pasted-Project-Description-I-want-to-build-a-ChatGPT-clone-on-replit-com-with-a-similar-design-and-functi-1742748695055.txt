Project Description:

I want to build a ChatGPT clone on replit.com with a similar design and functionality, using a minimalist aesthetic for user-friendly communication with an AI system. The app will integrate with an n8n webhook for processing user requests and returning AI-generated responses.

Key Features:
Webhook Integration:

The app should send user input to an n8n webhook and wait for a response before displaying results.

Use this webhook URL for communication:
[https://n8n.klaster.digital/webhook-test/4a1fed67-dcfb-4eb8-a71b-d47b1d651509]

The webhook processes the user’s input and returns a structured response.

User Input Handling:

Users should be able to submit text queries through an input field.

Upon submission, the input should be sent to the n8n webhook.

The app will wait for the webhook’s response and display it dynamically in the chat-like interface.

Response Display:

The response from the webhook should be displayed in a clean, minimalist chat interface, mimicking a conversation with an AI.

Each user input and corresponding response will be presented as a chat bubble.

User Actions:

Users should be able to submit text queries (similar to a typical chatbot interaction).

In the future, the interface can support additional user actions such as uploading files or tracking progress, though for now, focus on text-based communication.

Dynamic Interaction:

The app should handle dynamic interactions, ensuring that every user input triggers a new call to the webhook, with responses displayed in real-time in the chat.

Design & User Experience:
Visual Aesthetic:

The design should be minimalist and clean.

Use a dark mode theme with soft shadows and rounded corners.

Keep typography simple but modern, with slightly larger font size for chatbot responses for easier reading.

Add subtle animations for when responses load, giving users visual feedback that their request is being processed.

Responsive Design:

Ensure the app is fully responsive, providing a seamless experience on both desktop and mobile devices.

Chat Interface:

The main interface should replicate the conversation style of ChatGPT, where user inputs are shown on one side and AI responses on the other.

Each conversation should be easy to follow, with timestamps for messages.

Incorporate a scrolling feature that automatically scrolls down when new responses are received.

Error Handling:

If the webhook fails to return a response, the app should display a friendly error message like, "Oops! Something went wrong. Please try again."

Technical Implementation:
Frontend:

Use React.js or Vue.js for the frontend framework.

Create a simple form for the text input field, where users can type their query.

Implement an event listener that triggers when the form is submitted.

Display the conversation in a chatbox using components for user inputs and responses.

Backend (Webhook Integration):

Use Axios or Fetch API to send a POST request to the n8n webhook with the user’s input.

Handle the async response from the webhook and update the UI dynamically with the returned data.

State Management:

Use a state management tool like Redux or React Context to manage user queries and responses.

Keep track of the entire conversation and render it dynamically.

Deployment:

Use Replit’s environment to deploy the app and ensure the webhook is integrated smoothly.

Test the app to make sure user queries are processed through the n8n webhook and responses are displayed without delay.

